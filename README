# Chattington üí¨

Chattington is a real-time chat application that leverages WebSockets and RESTful APIs to enable instant messaging, friend management, and message editing/deletion. Built with Node.js, Express, and vanilla JavaScript, it provides a seamless and responsive chatting experience.

![Demo Screenshot](https://via.placeholder.com/800x500.png?text=Chattington+Demo) *Add your own screenshot here*

## Features ‚ú®

- **Real-time Messaging**: Instant message delivery using WebSockets.
- **User Authentication**: Secure login/signup with session management.
- **Friend Management**: Add or unfriend users.
- **Message Operations**: Edit or delete sent messages in real-time.
- **History Sync**: Load past messages when switching chat channels.
- **Responsive UI**: Clean and intuitive interface for seamless interaction.

## Technologies üõ†Ô∏è

- **Backend**: Node.js, Express, MySQL
- **Frontend**: Vanilla JavaScript, WebSockets
- **Database**: MySQL (hosted on Railway)
- **Authentication**: Express sessions, cookie-based
- **Environment Management**: `dotenv`

## Installation üì•

1. **Clone the repository**:
   ```bash
   git clone https://github.com/allonnnnnnn/Chattington.git
   cd Chattington
Install dependencies:

bash
Copy
npm install express mysql2 dotenv express-session ws crypto
Database Setup:

Create a MySQL database (e.g., railway).

Create tables for user, friendship, channel, and message (see Database Schema).

Environment Variables:
Create a .env file in the root directory:

env
Copy
DBHOST=your_database_host
DBPASSWORD=your_database_password
Run the server:

bash
Copy
node index.js
Access the app at http://localhost:8000.

Database Schema üóÉÔ∏è
sql
Copy
-- Example schema (adjust based on your actual table structures)
CREATE TABLE user (
  id INT AUTO_INCREMENT PRIMARY KEY,
  email VARCHAR(255) UNIQUE NOT NULL,
  name VARCHAR(255) NOT NULL,
  password VARCHAR(255) NOT NULL
);

CREATE TABLE friendship (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user1Id INT NOT NULL,
  user2Id INT NOT NULL,
  FOREIGN KEY (user1Id) REFERENCES user(id),
  FOREIGN KEY (user2Id) REFERENCES user(id)
);

CREATE TABLE channel (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user1Id INT NOT NULL,
  user2Id INT NOT NULL,
  FOREIGN KEY (user1Id) REFERENCES user(id),
  FOREIGN KEY (user2Id) REFERENCES user(id)
);

CREATE TABLE message (
  id INT AUTO_INCREMENT PRIMARY KEY,
  userId INT NOT NULL,
  channelId INT NOT NULL,
  message TEXT NOT NULL,
  date DATETIME NOT NULL,
  FOREIGN KEY (userId) REFERENCES user(id),
  FOREIGN KEY (channelId) REFERENCES channel(id)
);
API Endpoints üåê
Method	Endpoint	Description
POST	/login	User login
POST	/createNewAccount	Create a new account
POST	/addFriend	Add a friend by email
DELETE	/deleteFriendship	Remove a friend
PUT	/updateMessage	Edit a message
DELETE	/deleteMessage	Delete a message
GET	/getFriendships	Fetch all friends
GET	/getChannelId	Get current chat channel ID
Contributing ü§ù
Fork the repository.

Create a feature branch: git checkout -b feature/new-feature.

Commit changes: git commit -m "Add new feature".

Push to the branch: git push origin feature/new-feature.

Submit a pull request.

License üìÑ
MIT License. See LICENSE for details.

Copy

---

Replace placeholder text (e.g., database schema, screenshots) with actual content. Add deployment instructions if hosted on Railway or another platform.
